#define DEFAULT 0
#define SNIPE   1
#define MOUSE   2
#define SCROLL  3
#define SYSTEM  4

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <180>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lshift {
            bindings = <&kp LSHIFT>;
            key-positions = <12 13>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <11 12>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lalt {
            bindings = <&kp LALT>;
            key-positions = <10 11>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lwin {
            bindings = <&kp LWIN>;
            key-positions = <13 14>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rshigt {
            bindings = <&kp RSHIFT>;
            key-positions = <16 17>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rctrl {
            bindings = <&kp LCTRL>;
            key-positions = <18 17>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_ralt {
            bindings = <&kp LALT>;
            key-positions = <19 18>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rwin {
            bindings = <&kp RWIN>;
            key-positions = <16 15>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lshift_lctrl {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <11 12 13>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lshift_lalt {
            bindings = <&kp LS(LALT)>;
            key-positions = <10 13 12>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lctrl_lalt {
            bindings = <&kp LC(LALT)>;
            key-positions = <11 12 10>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lctrl_lwin {
            bindings = <&kp LC(LWIN)>;
            key-positions = <11 13 12 10>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rctrl_rwin {
            bindings = <&kp LC(LWIN)>;
            key-positions = <16 17 18 19>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rshift_rctrl {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <18 17 16>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rshift_ralt {
            bindings = <&kp LS(LALT)>;
            key-positions = <16 19 17>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rctrl_ralt {
            bindings = <&kp LC(LALT)>;
            key-positions = <18 17 19>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <1 2>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <2 3>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_dllr {
            bindings = <&kp DLLR>;
            key-positions = <3 4>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_excl {
            bindings = <&kp EXCL>;
            key-positions = <4 5>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <5 6>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <6 7>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_amps {
            bindings = <&kp AMPS>;
            key-positions = <7 8>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_astrk {
            bindings = <&kp ASTRK>;
            key-positions = <8 9>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 23>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <23 24>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <2 1>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <2 3>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_divide {
            bindings = <&kp SLASH>;
            key-positions = <3 12>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_multiply {
            bindings = <&kp ASTRK>;
            key-positions = <12 1>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <23 22>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_dot {
            bindings = <&kp DOT>;
            key-positions = <22 21>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lang {
            bindings = <&kp RALT>;
            key-positions = <26 25>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_hanja {
            bindings = <&kp RCTRL>;
            key-positions = <25 27>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_mse_tog {
            bindings = <&tog 2>;
            key-positions = <33 34>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2>;
        };

        combo_scr_tog {
            bindings = <&tog 3>;
            key-positions = <34 35>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 3>;
        };

        combo_snipe {
            bindings = <&mo 1>;
            key-positions = <29 28>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            slow-release;
        };

        combo_scroll {
            bindings = <&mo 3>;
            key-positions = <28 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            slow-release;
        };

        combo_lclk {
            bindings = <&mkp LCLK>;
            key-positions = <26 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            slow-release;
        };

        combo_rclk {
            bindings = <&mkp RCLK>;
            key-positions = <26 28>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            slow-release;
        };

        combo_mclk {
            bindings = <&mkp MCLK>;
            key-positions = <26 28 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            slow-release;
        };

        combo_prev {
            bindings = <&mkp MB4>;
            key-positions = <26 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_next {
            bindings = <&mkp MB5>;
            key-positions = <17 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWER";
            bindings = <
&kp Q      &kp W     &kp E     &kp R      &kp T                                &kp Y            &kp U  &kp I      &kp O    &kp P
&kp A      &kp S     &kp D     &kp F      &kp G                                &kp H            &kp J  &kp K      &kp L    &kp SEMI
&kp Z      &kp X     &kp C     &kp V      &kp B                                &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp LWIN  &kp LALT  &lt 1 ESC  &lt 2 SPACE  &lt 3 TAB  &lt 1 ENTER  &lt 2 BACKSPACE                             &lt 3 DEL
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&kp LEFT_BRACKET  &kp N7    &kp N8    &kp N9   &kp RBKT                      &kp PLUS   &kp F7  &kp F8  &kp F9  &kp F12
&kp SQT           &kp N4    &kp N5    &kp N6   &kp EQUAL                     &kp MINUS  &kp F4  &kp F5  &kp F6  &kp F11
&kp GRAVE         &kp N1    &kp N2    &kp N3   &kp BSLH                      &kp ASTRK  &kp F1  &kp F2  &kp F3  &kp F10
&kp LCTRL         &kp LWIN  &kp LALT  &kp DOT  &kp N0     &kp MINUS  &trans  &kp SLASH                          &kp RSHIFT
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC                       &mkp MCLK  &kp HOME   &trans    &kp END    &kp DEL
&kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS                       &mkp MB4   &kp LEFT   &kp UP    &kp RIGHT  &kp PG_UP
&kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE                       &mkp MB5   &mkp LCLK  &kp DOWN  &mkp RCLK  &kp PG_DN
&kp LCTRL  &kp LWIN  &kp LALT   &kp LPAR   &kp RPAR  &lt 3 UNDER  &trans  &trans                                     &lt 3 DEL
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp INS    &kp DEL                    &mkp MCLK  &kp HOME   &trans    &kp END    &kp DEL
&kp LC(A)        &kp LC(S)       &kp LC(D)        &kp LC(F)  &kp LC(G)                  &mkp MB4   &kp LEFT   &kp UP    &kp RIGHT  &kp PG_UP
&kp LC(Z)        &kp LC(X)       &kp LC(C)        &kp LC(V)  &kp LC(Y)                  &mkp MB5   &mkp LCLK  &kp DOWN  &mkp RCLK  &kp PG_DN
&kp LCTRL        &kp LWIN        &kp LALT         &trans     &trans     &trans  &trans  &trans                                     &trans
            >;
        };

        system_layer {
            label = "SYS";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &bt BT_CLR  &bt BT_CLR_ALL  &out OUT_TOG  &sys_reset  &bootloader
&trans        &trans        &trans        &trans        &trans                        &trans      &trans          &trans        &trans      &trans
&trans        &trans        &trans        &trans        &trans                        &trans      &trans          &trans        &trans      &trans
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans                                                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        sys_layer {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };
};
